#!/usr/bin/env bash

#------------------------------------------------------------
#
#Ciro D. Santilli 
#
#  THANKS TO
#
#    http://www.thegeekstuff.com/2009/10/debian-ubuntu-install-upgrade-remove-packages-using-apt-get-apt-cache-apt-file-dpkg/
#
#------------------------------------------------------------

#imporant info

  #USE APTITUDE INSTEAD OF APT-GET!!!
    #sudo apt-get install aptitude

  #apt-get vs aptitude vs synaptic

    #*it seems that* apt-get aptitude, and synaptic are front-ends for dpkg.therefore they should be compatible.

    #synaptic has a gui interface, but less options..

    #aptitude seems to be more powerful than apt-get

  #metapackages

    #metapackages are packages that contain no source code of their own, but have several dependencies

    #they serve as a collection of software that is useful when installed together.

    #examples: texlive-full (*lots* ot latex packages), several desktop environments, etc.

    #it seems that dpkg without additional info has no way to tell the
    #difference between packages installed as deps of a metadata
    #and packages explicitly installed: it is as if you had written if all by yourself on the command line

    #it seems that aptitude can store this information, and desinstall metapackages in one go:
    #*major* reason for using aptitude!!!

    #there seems to be no way of telling

  #dev packages

    #are packages that contain libraries to build stuff, typically .so files

  #source types
    #Main - Officially supported software.
    #Restricted - Supported software that is not available under a completely free license.
    #Universe - Community maintained software, i.e. not officially supported software.
    #Multiverse - Software that is not free. 

#first time

  sudo apt-get update
  sudo apt-get install aptitude

  #proxy

    sudo vim /etc/apt/apt.conf
    Acquire::http::Proxy "http://proxy.server.here:port/";
    #add the last line to your /etc/apt/apt.conf to enable apt-get through a proxy-server.

#making packages

  #TODO! =) someday ill get to the point of having something useful to package too myself...
  #and then I'll learn this!

#sources

  #add keys
  sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 5044912E

  #add sources
    #add a ppa. a ppa is a personal source, not directly supported by Ubuntu.
    sudo add-apt-repository ppa:deluge-team/ppa
    sudo aptitude update

    sudo add-apt-repository -y "$SRC"
      #don't ask for confirmation

  #list sources 

    #sources list. does not include ppas
    cat /etc/apt/sources.list
    sudo vim /etc/apt/sources.list

    #ppas you added are kept in separate files in this dir:
    ls -1 /etc/apt/sources.list.d/

  #remove sources

    #you could remove them manually, but there it is better to do that with ppa-purge:
    sudo aptitude install ppa-purge
    sudo ppa-purge ppa:matthaeus123/mrw-gimp-svn

  #update existing sources

    sudo aptitude update
      #looks for possible updgrades on known dirs, but does not install them

#get info on installed packages

  #dpkg

    #info on installed packages
    
    dpkg -l | grep $EXPRESSION
      #lists all installed packages.and greps for foo.
      #the first two letters mean:
      # ii: installed
      # rc: configuration files only (rc means config such as in bashRC)

    dpkg -L mysql
      #list files in installed package

#find new packages

  sudo apt-cache search "Apache Server"
  #searches package name and descriptions on the web

  ##apt-file

    #search for and list package files
    
    sudo aptitude install apt-file
    apt-file update
    f=

    ##search

      apt-file search "$f"
        #search for file "$F" in packages.
        #literal path substring match.
      apt-file search -x "a.c"
        #using a perl regex.

    ##show

      p=
      apt-file show "$p"
        #shows files in package p

#get new package info

  apt-cache depends $PKG
    #list package dependencies

  sudo apt-get build-dep $PKG
    #? what is the difference between this and depends

  sudo apt-rdepends -r $PKG
    #who depends on $PKG: reverse dependencies

  apt-cache show $PKG
    #basic information about a package

  apt-cache showpkg $PKG
    #detailed information about a package

  sudo aptitude install debtags
  debtags tag ls $PKG

  #package naming conventions
    #-dev:  headers and libs, no docs
    #-doc:  documentation
    #-test: tests

#install

  sudo aptitude install $PKG
  #install package

  sudo aptitude install -o APT::Install-Recommends="true" $PKGg
  #also installs recommended packages
  #-o option changes things which could be in the config files.

  sudo aptitude install -o APT::Install-Suggests="true" $PKGg
  #also installs suggested packages

#upgrade installed packages

  #upgrade a single package
  sudo apt-get -u install $PKG

  #upgrades all packages for which upgrade does not involve installing more packages
  sudo apt-get -u upgrade

  #upgrades all packages, even if upgrade requires installation of new packages 
  sudo apt-get dist-upgrade

#remove packages. someday they have to die =(

  #sudo apt-get remove $PKG
  sudo aptitude remove $PKG
  #remove package but leave configuration files

  #sudo apt-get purge $PKG
  sudo aptitude purge $PKG
  #remove package and configuration files

  sudo apt-get autoremove
  #removes dependencies which you did not install explicitly (didn't write on the command line yourself)
  #and that are no longer necessary. always follows remove or purge
  #dpkg then must contain information about what you installed yourself or not.

  #does nothing for packages that come from metapackages, which are treated as if you had
  #manually installed them. This is where aptitude comes in!

  sudo apt-get autoclean
  #?

  sudo apt-get clean
  #?

#optins

  sudo aptitude install -y "$PKG"
     #dont prompt for confirmation

#common combos

  #to correct dep problems try:
    PKG=gimp
    sudo apt-get update
    sudo apt-get purge $PKG
    sudo apt-get autoremove
    sudo apt-get autoclean
    sudo apt-get clean
    sudo apt-get autoremove
    suto apt-get install $PKG
    #also, if the package comes from a ppa, remove the ppa and try again
