#!/usr/bin/env bash

#!USER CONFIGURATION #modify this as you need
NETHACK_SAVE_DIR=/var/games/nethack/save #where saves are originally
NETHACK_STATE_DIR="$HOME/.nethack_save" #where you want to save the saves
#!/USER CONFIGURATION

set -u # error on undefined variable
set -e # stop execution if one command goes wrong

usage()
{
    echo 'usage: nethack-save-load [a|s|l] pref

#Summary

Manages multiple nethack saves.

#Installation

Nethack dir, output save dir must and save separtor must be specified by
modifying the variables SEP, NETHACK_SAVE_DIR and NETHACK_STATE_DIR at the beginning
of the source code of this script.

If you do this after saving, old saves will be lost.

#Sample Calls

First save nethack with S command and wait for the game to quit.

To save the game use one of the following:

        nethack-save-load s 1; nethack        #saves state 1, and comes back to the game
        nethack-save-load s "hard part"; nethack     #saves state "hard part"
        nethack-save-load s "as__df";    # forbidden because name contains magic sequence "__"

To list All saved games do:

        nethack-save-load a

To load a state, quit the current game then use one of the following:

        nethack-save-load l 1; nethack        # loads state 1, and comes back to the game
        nethack-save-load l "hard part"; nethack        # loads state "hard part"
        nethack-save-load l __; nethack        # loads last saved game (magic sequence "__")

When you start the game it should be back at last place.

#Description

You must exit nethack by saving the game with `S` for the save to work.

You cannot use this script while nethack is running: nethack must be off for saving and loading!

Save state names cannot contain "__".

There is always a special save state called "__" that loads the last game you saved with
this program (not the last game you saved from inside nethack with `S`).
' 1>&2
}

SEP="__" #separator for the new save name. cannot appear on the prefix you give!!

if [ $# -eq 0 ]; then
    usage
    exit 2
fi
COMMAND="$1"

#check no separator SEP in prefix
function check_sep {
    if [[ "$PREF" != "$SEP" && "$PREF" == *"$SEP"* ]]; then
        echo "State name cannot contain \"$SEP\". Use another state name."
        exit 2
    fi
}

mkdir -p "$NETHACK_STATE_DIR"

case "$COMMAND" in
    a)
        if [ $# -ne 1 ]; then
            usage
            exit 2
        fi
        ls -1 "$NETHACK_STATE_DIR" | sed -E "s/(.*)$SEP.*/\1/"
    ;;
    l)
        if [ $# -ne 2 ]; then
            usage
            exit 2
        fi
        PREF="$2"
        check_sep
        for F in "$NETHACK_STATE_DIR/$PREF"*; do
            BNAME="$(basename "$F")"
            BNAME_OLD="${BNAME##*${SEP}}"
            sudo cp -f "$F" "$NETHACK_SAVE_DIR/$BNAME_OLD"
            break
        done
    ;;
    s)
        if [ $# -ne 2 ]; then
            usage
            exit 2
        fi
        PREF="$2"
        check_sep
        for F in "$NETHACK_SAVE_DIR/$(id -u)$(id -un)"*; do
            BNAME="$(basename "$F")"
            sudo cp -f "$F" "$NETHACK_STATE_DIR/${PREF}${SEP}${BNAME}"
            sudo cp -f "$F" "$NETHACK_STATE_DIR/${SEP}${SEP}${BNAME}" #also saves to a separator
            break
        done
    ;;
    *)
        usage
        exit 2
    ;;
esac

exit 0
