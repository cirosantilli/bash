#!/usr/bin/env bash

# dependencies = ['sudo apt-get install perl',
# './basename-noext'
# './ext-nodot'
# ]

#------------------------------------------------------------
#
# Ciro D. Santilli 
#
#------------------------------------------------------------

set -u # error on undefined variable
set -e # stop execution if one command goes wrong

usage()
{
  echo "Usage: rename-basename find-replace do-rename

EXAMPLES:

find . -print0 | rename-basename 's/a(.*)b/a(\$1)b/g' 0
# renames 
# will not rename find results, and will print oldname\nnewname\n to sterr
# only for files that have changed their names

find . -print0 | rename-basename 's/a/b/g' 1
# will rename find results, and only print errors to stderr

POSITIONAL PARAMETERS

  find-replace : perl regex find replace

  do-rename : 0 or 1. if 0, do not rename, prints old/new/newline
    if 1, rename, and print errors only

OPTIONS

  -E If given the extension is ommited. Thing of the upper case as a negation.

DESCRIPTION

  Takes a list of paths from the standard input separated by nulls
  and renames their basenames them using a perl regex.

  paths never change directories. therefore you cannot add a '/' to
  the new basename, or you will get a warning if do-rename = 0

  the '.' find result is not renamed

  all output messages are put into stderr

ALTERNATIVES

  mmv : does not do perl regex.

" 1>&2
}

EXTENSION=true
DELIM=' '

while getopts Eh OPT; do
  case "$OPT" in
    E)
      EXTENSION=false
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      usage
      exit 1
      ;;
  esac
done

shift `expr $OPTIND - 1`

if [ $# -ne 2 ]
then
  usage
  exit 1
fi

FIND_REPLACE="$1"
DO_RENAME="$2"

if [ "$DO_RENAME" = "1" ]; then
  DO_RENAME=true
elif [ "$DO_RENAME" = "0" ]; then
  DO_RENAME=false
else
  echo " do-rename must be either 0 (false) or 1 (true)" 1>&2
  usage
  exit 1
fi

# main

old_new_print()
{
  echo "$FILE" 1>&2
  echo "$NEW_FILE" 1>&2
}

error_change_dir()
{
  HAS_ERROR=true
  echo "The new parent directory is not the same as the old one. rename-basename cannot change directories." 1>&2
}

HAS_ERROR=false
while IFS= read -r -u3 -d $'\0' FILE; do

  if [ "$FILE" = '.' ]; then
    continue
  fi

  OLD_BNAME="$( basename "$FILE" )"

  if $EXTENSION; then
    NEW_BNAME="$( echo "$OLD_BNAME" | perl -pe "$FIND_REPLACE" )"
  else
    EXT="$( ext-nodot "$OLD_BNAME" )"
    NEW_BNAME="$( echo "$( basename-noext "$OLD_BNAME" )" | perl -pe "$FIND_REPLACE" )"
    NEW_BNAME="$NEW_BNAME"."$EXT"
  fi

  DIR="$( dirname "$FILE")"
  NEW_FILE="$DIR"/"$NEW_BNAME"
  NEW_DIR="$( dirname "$NEW_FILE")"

  if ! $DO_RENAME; then

    if [ "$DIR" != "$NEW_DIR" ]; then
      error_change_dir
    fi

    if [ "$NEW_BNAME" != "$OLD_BNAME" ]; then
      old_new_print
      echo
    fi

  else # do rename

    if [ "$DIR" != "$NEW_DIR" ]; then

      old_new_print
      error_change_dir
      echo

    elif [ ! -e "$NEW_FILE" ]; then

        mv "$FILE" "$NEW_FILE"

    fi

  fi
  
done 3< <( sort -rz )
# this reverses the find order, so that deeper files get renamed
# first, this way you can rename dirs without worrying

if $HAS_ERROR; then
  echo "At least one error occurred." 1>&2
fi

exit 0
